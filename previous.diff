diff --git a/src/components/MintForm.tsx b/src/components/MintForm.tsx
index b04efa2..27f26e9 100644
--- a/src/components/MintForm.tsx
+++ b/src/components/MintForm.tsx
@@ -24,8 +24,9 @@ import { Address, Hash, parseAbi } from "viem";
 import { FaArrowDown, FaArrowUp, FaX } from "react-icons/fa6";
 import { themeVariables } from "@/styles/themeVariables";
 import { toast, ToastContainer } from "react-toastify";
-import { mainnet, sepolia, base, optimism } from "viem/chains";
+import { mainnet, sepolia } from "viem/chains";
 import { useAppConfig } from "./AppConfigContext";
+import { MintSuccess } from "./MintSuccess";
 
 enum RegistrationStep {
   START = 0,
@@ -34,9 +35,7 @@ enum RegistrationStep {
   COMPLETE = 3,
 }
 
-const ETH_COIN = 60;
-const BASE_COIN = 2147492101;
-const OP_COIN = 2147483658;
+// No coin type constants needed
 
 export const MintForm = () => {
   const { isRenting, listedName, listingChainId, isTestnet, defaultAvatarUri } =
@@ -64,6 +63,7 @@ export const MintForm = () => {
   const [registrationStep, setRegistrationStep] = useState(
     RegistrationStep.START
   );
+  const [showSuccess, setShowSuccess] = useState(false);
 
   const [primaryNameIndicators, setPrimaryNameIndicators] = useState<{
     waiting: boolean;
@@ -131,22 +131,12 @@ export const MintForm = () => {
     if (chainId !== listingChainId) {
       await switchChainAsync({ chainId: listingChainId });
     }
-    const addresses: { coin: number; value: string; chain: number }[] = [
+    // Use standard ETH address records with the correct field names
+    const addresses: { value: string; chain: number }[] = [
       {
         value: address,
-        coin: ETH_COIN,
-        chain: mainnet.id,
-      },
-      {
-        value: address,
-        coin: BASE_COIN,
-        chain: base.id,
-      },
-      {
-        value: address,
-        coin: OP_COIN,
-        chain: optimism.id,
-      },
+        chain: mainnet.id, // Ethereum mainnet
+      }
     ];
 
     const texts: { key: string; value: string }[] = [];
@@ -157,11 +147,23 @@ export const MintForm = () => {
 
     try {
       setMintIndicator({ btnLabel: "Waiting for wallet", waiting: true });
+      
+      // Debug for detecting address record issues
+      console.log("Debug - Mint Records:", {
+        address,
+        chain: mainnet.id,
+        texts
+      });
+      
+      // Use standard ETH address format with chain rather than coin
       const params = await mintParameters({
         minterAddress: address,
         expiryInYears: expiryYears,
         records: {
-          addresses: addresses,
+          addresses: [{
+            value: address,
+            chain: mainnet.id,
+          }],
           texts: texts,
         },
         label: label,
@@ -173,7 +175,10 @@ export const MintForm = () => {
       setRegistrationStep(RegistrationStep.TX_SENT);
       setMintIndicator({ btnLabel: "Registering...", waiting: true });
       await waitForTx(tx);
+      setShowSuccess(true);
       setRegistrationStep(RegistrationStep.PRIMARY_NAME);
+      // Auto-hide success animation after 3 seconds
+      setTimeout(() => setShowSuccess(false), 3000);
     } catch (err: any) {
       console.error(err);
       if (err?.cause?.details?.includes("User denied transaction signatur")) {
@@ -190,7 +195,7 @@ export const MintForm = () => {
 
   const parseError = (errMessage: string) => {
     if (errMessage.includes("MINTER_NOT_TOKEN_OWNER")) {
-      setMintError("You don't have enought tokens for minting!");
+      setMintError("You don't have enough tokens for minting!");
     } else if (errMessage.includes("SUBNAME_TAKEN")) {
       setMintError("Subname is already taken");
     } else if (errMessage.includes("MINTER_NOT_WHITELISTED")) {
@@ -201,8 +206,10 @@ export const MintForm = () => {
       setMintError("Subname is reserved");
     } else if (errMessage.includes("VERIFIED_MINTER_ADDRESS_REQUIRED")) {
       setMintError("Verification required");
+    } else if (errMessage.includes("Unsupported coin type")) {
+      setMintError("Unsupported blockchain configuration");
     } else {
-      setMintError("Unknown error ocurred. Check console for more info");
+      setMintError("Unknown error occurred. Please try again.");
     }
   };
 
@@ -300,18 +307,21 @@ export const MintForm = () => {
         >
           Nounify Yourself
         </Text>
-        <Text
+        <Box 
           mt={0}
           mb={0}
           color={themeVariables.dark}
           fontSize={subHeadlineFontSize}
           textAlign="center"
-          className="courier-prime"
+          className="courier-prime tagline-container"
+          display="flex"
+          alignItems="center"
+          justifyContent="center"
+          flexWrap="nowrap"
+          whiteSpace="nowrap"
         >
-          <div className="tagline-container" style={{ display: "inline-flex", alignItems: "center", flexWrap: "nowrap", whiteSpace: "nowrap" }}>
-            Strap on the <Image src={"/favicon.svg"} height={20} style={{marginTop: 5, marginLeft: 5, marginRight: 5}} />, and enter the Nouniverse
-          </div>
-        </Text>
+          Strap on the <Image src={"/favicon.svg"} height={20} mx={1} mt={1} />, and enter the Nouniverse
+        </Box>
       </Box>
       <Box
         bg="transparent"
@@ -370,8 +380,8 @@ export const MintForm = () => {
                   ml={4}
                   disabled={mintBtnDisabled}
                   color={themeVariables.light}
-                  bg="#888"
-                  _hover={{ bg: "#666" }}
+                  bg={indicators.available && !noLabel && !indicators.checking ? '#069420' : "#888"}
+                  _hover={{ bg: indicators.available && !noLabel && !indicators.checking ? "#069420" : "#666" }}
                   borderRadius="5px"
                   className="londrina-solid mint-btn"
                 >
@@ -413,7 +423,7 @@ export const MintForm = () => {
                 </Box>
               )}
 
-              <Box
+              {/* <Box
                 mt={2}
                 p={3}
                 bg="#F2A730"
@@ -428,9 +438,11 @@ export const MintForm = () => {
               >
                 <Text mb={0}>
                   Disabled button if: <br />
-                  â€¢ no input in field <br />â€¢ wallet not connected
-                </Text>
-              </Box>
+                  â€¢ no input in field <br />
+                  â€¢ wallet not connected <br />
+                  â€¢ name is already taken
+                </Text> 
+              </Box> */}
 
               {subnameTakenErr && (
                 <Text
@@ -439,7 +451,7 @@ export const MintForm = () => {
                   mt={5}
                   mb={0}
                 >
-                  Subname is already registered
+                  {label} is already registered.
                 </Text>
               )}
               {mintError.length > 0 && (
@@ -507,8 +519,9 @@ export const MintForm = () => {
                 fontSize={24}
                 mt={2}
                 mb={4}
+                className="londrina-solid"
               >
-                You have registered
+                Nounification complete!
               </Text>
               <Box display="flex" justifyContent="center" mb={1}>
                 <Box
@@ -572,8 +585,9 @@ export const MintForm = () => {
                 fontSize={24}
                 mt={2}
                 mb={4}
+                className="londrina-solid"
               >
-                You have registered
+                Nounification complete!
               </Text>
               <Box display="flex" justifyContent="center" mb={1}>
                 <Box
@@ -642,6 +656,7 @@ export const MintForm = () => {
         }}
         hideProgressBar
       />
+      <MintSuccess active={showSuccess} />
     </Grid>
   );
 };
diff --git a/src/components/MintSuccess.tsx b/src/components/MintSuccess.tsx
new file mode 100644
index 0000000..3476db5
--- /dev/null
+++ b/src/components/MintSuccess.tsx
@@ -0,0 +1,80 @@
+import { useEffect, useState } from 'react';
+import { Box } from '@chakra-ui/react';
+import { keyframes } from '@emotion/react';
+
+// Animation keyframes
+const fireEmoji = keyframes`
+  0% { transform: translateY(0) scale(0.5); opacity: 0; }
+  50% { opacity: 1; }
+  100% { transform: translateY(-80px) scale(1.2); opacity: 0; }
+`;
+
+const sparkleEmoji = keyframes`
+  0% { transform: translateY(0) scale(0.5) rotate(0deg); opacity: 0; }
+  50% { opacity: 1; }
+  100% { transform: translateY(-100px) scale(1) rotate(180deg); opacity: 0; }
+`;
+
+interface MintSuccessProps {
+  active: boolean;
+}
+
+export const MintSuccess = ({ active }: MintSuccessProps) => {
+  const [emojis, setEmojis] = useState<Array<{ id: number, type: string, left: number }>>([]);
+  
+  useEffect(() => {
+    if (!active) return;
+    
+    // Create initial set of emojis
+    const initialEmojis = Array.from({ length: 15 }, (_, i) => ({
+      id: i,
+      type: Math.random() > 0.5 ? 'ðŸ”¥' : 'âœ¨',
+      left: Math.random() * 100, // Random position across container
+    }));
+    
+    setEmojis(initialEmojis);
+    
+    // Add more emojis over time
+    const interval = setInterval(() => {
+      setEmojis(prev => [
+        ...prev,
+        {
+          id: Date.now(),
+          type: Math.random() > 0.5 ? 'ðŸ”¥' : 'âœ¨',
+          left: Math.random() * 100,
+        }
+      ]);
+    }, 300);
+    
+    // Cleanup
+    return () => clearInterval(interval);
+  }, [active]);
+  
+  if (!active) return null;
+  
+  return (
+    <Box
+      position="absolute"
+      bottom="0"
+      left="0"
+      width="100%"
+      height="150px"
+      overflow="hidden"
+      pointerEvents="none"
+      zIndex="10"
+    >
+      {emojis.map(emoji => (
+        <Box
+          key={emoji.id}
+          position="absolute"
+          bottom="0"
+          left={`${emoji.left}%`}
+          fontSize="24px"
+          animation={`${emoji.type === 'ðŸ”¥' ? fireEmoji : sparkleEmoji} 2s ease-out forwards`}
+        >
+          {emoji.type}
+        </Box>
+      ))}
+    </Box>
+  );
+};
diff --git a/src/components/MySubnames.tsx b/src/components/MySubnames.tsx
index 5de002e..6392d2d 100644
--- a/src/components/MySubnames.tsx
+++ b/src/components/MySubnames.tsx
@@ -11,7 +11,7 @@ import {
 } from "@chakra-ui/react";
 import { themeVariables } from "@/styles/themeVariables";
 import { Subname } from "./Types";
-import axios from "axios";
+import axios, { all } from "axios";
 import { useAccount } from "wagmi";
 import { useEffect, useMemo, useState } from "react";
 import { SideModal } from "./SideModal";
@@ -98,9 +98,10 @@ export const MySubnames = ({ setView }: MySubnamesProps) => {
       flexDirection="column"
       alignItems="center"
       justifyContent="flex-start"
-      paddingTop="50px"
+      paddingTop="30px"
       maxWidth="800px"
       mx="auto"
+      px={4}
     >
       {selectedSubname !== undefined && (
         <SideModal open={true} onClose={() => setSelectedSubname(undefined)}>
@@ -120,35 +121,42 @@ export const MySubnames = ({ setView }: MySubnamesProps) => {
       >
         <Text
           mt={0}
-          mb={6}
+          mb={0}
           color={themeVariables.dark}
           fontSize="48px"
           textAlign="center"
           fontWeight="700"
+          className="londrina-solid"
         >
-          {subnames.totalItems} names minted
+          {subnames.totalItems > 0
+            ? `${subnames.totalItems} names minted`
+            : "No names minted"}
         </Text>
       </Box>
-      <Box width="100%" alignSelf="center">
-        <Flex justifyContent="space-between" alignItems="center" mb={4}>
-          <Input
-            value={searchFilter}
-            onChange={(e) => setSearchFilter(e.target.value)}
-            placeholder={"Search names"}
-            borderRadius="5px"
-            width={{ base: "60%", md: "50%" }}
-            borderColor="#ccc"
-          />
-        </Flex>
-      </Box>
+      {allSubnames.length ? (
+        <Box width="100%" alignSelf="center">
+          <Flex justifyContent="space-between" alignItems="center" mb={4}>
+            <Input
+              value={searchFilter}
+              onChange={(e) => setSearchFilter(e.target.value)}
+              placeholder={"Search names"}
+              borderRadius="5px"
+              width={{ base: "60%", md: "50%" }}
+              borderColor="#ccc"
+            />
+          </Flex>
+        </Box>
+      ) : null}
       <Box
         bg="white"
         p={boxPadding}
         alignSelf="center"
-        shadow="md"
-        height="400px"
+        shadow="none"
+        height="300px"
+        width="100%"
+        maxWidth="600px"
         position="relative"
-        border="1px solid"
+        border="1px solid none"
         borderColor={themeVariables.accent}
       >
         {subnames.fetching && (
@@ -173,16 +181,30 @@ export const MySubnames = ({ setView }: MySubnamesProps) => {
                     alignItems="center"
                     justifyContent="center"
                   >
-                    <Text color={themeVariables.accent} fontSize={24} mb={10}>
-                      You don't own any subname
-                    </Text>
+                    <Text
+                      color={themeVariables.dark}
+                      fontSize={24}
+                      mb={8}
+                      className="courier-prime"
+                    >
+                      You don't own any names.
+                    </Text>{" "}
                     <Button
                       onClick={() => setView("mint")}
-                      width="50%"
+                      height="45px"
+                      width="auto"
+                      paddingX={5}
                       color={themeVariables.light}
-                      bg={themeVariables.accent}
+                      bg="#069420"
+                      _hover={{ bg: "#009612" }}
+                      className="londrina-solid"
+                      fontSize="20px"
+                      borderRadius="5px"
                     >
-                      Register
+                      <Box as="span" display="flex" alignItems="center">
+                        <Image src="/favicon.svg" height="22px" mr={2} />
+                        Mint a name
+                      </Box>
                     </Button>
                   </Flex>
                 )}
@@ -245,12 +267,20 @@ export const MySubnames = ({ setView }: MySubnamesProps) => {
                           {subname.name}.noun.eth
                         </Text>
                         {index === 0 && (
-                          <Box ml={2} px={2} py={1} bg="black" color="white" fontSize="xs" borderRadius="2px">
+                          <Box
+                            ml={2}
+                            px={2}
+                            py={1}
+                            bg="black"
+                            color="white"
+                            fontSize="xs"
+                            borderRadius="2px"
+                          >
                             Primary
                           </Box>
                         )}
                       </Flex>
-                      <Button 
+                      <Button
                         onClick={() => setSelectedSubname(subname)}
                         size="sm"
                         color="blue.500"
@@ -264,7 +294,17 @@ export const MySubnames = ({ setView }: MySubnamesProps) => {
           </>
         )}
       </Box>
-      <Box mt={5} p={3} bg="#f8a100" borderRadius="5px" fontSize="0.9em" textAlign="left" maxWidth="600px" width="100%">
+      <Box
+        display={allSubnames.length > 0 ? "block" : "none"}
+        mt={5}
+        p={3}
+        bg="#f8a100"
+        borderRadius="5px"
+        fontSize="0.9em"
+        textAlign="left"
+        maxWidth="600px"
+        width="100%"
+      >
         <Text mb={0}>
           Manage name navs users to ens.app: https://app.ens.domains/{"{name}"}
         </Text>
diff --git a/src/components/_styles.scss b/src/components/_styles.scss
index 901d7bb..c0bd063 100644
--- a/src/components/_styles.scss
+++ b/src/components/_styles.scss
@@ -61,6 +61,22 @@
 
 .mint-btn {
   box-shadow: 0 2px 10px rgba(0,0,0,0.1);
+  
+  &.available {
+    background-color: #00db44 !important;
+    &:hover {
+      background-color: #00c73c !important;
+    }
+  }
+  
+  &.unavailable {
+    background-color: #888 !important;
+    opacity: 0.7;
+    cursor: not-allowed;
+    &:hover {
+      background-color: #666 !important;
+    }
+  }
 }
 
 // Nouns glasses styling
